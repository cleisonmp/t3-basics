import axios from "axios";
import type { GetServerSideProps } from "next";
import { type NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import type { ChangeEvent } from "react";
import { getServerAuthSession } from "../server/common/get-server-auth-session";
import { trpc } from "../utils/trpc";

async function uploadToS3(e: ChangeEvent<HTMLFormElement>) {
  const formData = new FormData(e.target);

  const file = formData.get("file");

  if (!file) {
    return null;
  }

  //TODO fix later
  type FileType = {
    type: string;
  };
  const fileType = encodeURIComponent((file as FileType).type);

  const { data } = await axios.get(`/api/image-upload?fileType=${fileType}`);

  const { uploadUrl, fileKey } = data;

  await axios.put(uploadUrl, file);

  return fileKey;
}

const ImageUpload: NextPage = () => {
  const { data: imagesList, isLoading } = trpc.imagebank.getAll.useQuery(
    undefined,
    {
      refetchInterval: 1000 * 60, //60 seconds,
      refetchOnWindowFocus: false,
    }
  );
  const utils = trpc.useContext();
  const postImage = trpc.imagebank.postMessage.useMutation({
    onMutate: () => {
      utils.imagebank.getAll.cancel();
      const optimisticUpdate = utils.imagebank.getAll.getData();

      if (optimisticUpdate) {
        utils.imagebank.getAll.setData(optimisticUpdate);
      }
    },
    onSettled: () => {
      utils.imagebank.getAll.invalidate();
    },
  });

  /* render selected image
  const [imageFile, setImageFile] = useState<File>();
  const [createObjectURL, setCreateObjectURL] = useState("");
  const uploadToClient = (event: ChangeEvent<HTMLInputElement>) => {
    if (event.target.files && event.target.files[0]) {
      const image = event.target.files[0];

      setImageFile(image);
      setCreateObjectURL(URL.createObjectURL(image));
    }
  };*/

  if (isLoading) return <div>Fetching images...</div>;

  async function handleSubmit(e: ChangeEvent<HTMLFormElement>) {
    e.preventDefault();

    const fileKey = await uploadToS3(e);

    postImage.mutate({
      fileKey,
    });

    console.log("fileKey", fileKey);
  }

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="container mx-auto flex min-h-screen flex-col items-center justify-center  p-4">
        <h1 className="text-5xl font-extrabold leading-normal text-gray-700 md:text-[5rem]">
          Image <span className="text-purple-300">Upload</span>
        </h1>

        <p>Please select file to upload</p>
        <form onSubmit={handleSubmit}>
          <input type="file" accept="image/jpeg image/png" name="file" />
          <button type="submit">Upload</button>
        </form>
        <div>
          <p>Image List</p>
          {imagesList?.map((image) => (
            <div key={image.fileKey}>
              <span>fileLink:{image.fileKey}</span>
              <Image
                src={`https://t3-demo-app.s3.sa-east-1.amazonaws.com/${image.fileKey}`}
                alt=""
                width={200}
                height={200}
              />
            </div>
          ))}
        </div>
      </main>
    </>
  );
};

export default ImageUpload;

export const getServerSideProps: GetServerSideProps = async (context) => {
  const { req, res } = context;
  const session = await getServerAuthSession({ req, res });
  if (!session) {
    return {
      props: {},
      redirect: {
        permanent: false,
        destination: "/",
      },
    };
  }
  return {
    props: {
      session,
    },
  };
};
